/*
	This is a NKAIDH_BOT_TELEGRAM project file.
	Developer: sizeoftrickster <sizeoftrickster@gmail.com>
	
	See more here https://github.com/sizeoftrickster/NKAIDH_BOT_TELEGRAM
	
	Copyright (c) 2025 Andrey Gazizov <sizeoftrickster@gmail.com>. All rights reserved.
*/

import { Markup } from "telegraf";
import { InlGetSchedule, InlPinGroup, InlSelectDay, SelectGroupActionsRegExp } from "../bot.constants";
import { CheckInputArgs, GetEmojiFromDirection, GetGroupsNumber, GetNameFromContext, GetNameFromDirection } from "../bot.utils";

function GetGroupsButton(groups: number[], userId: number, matchedDirection: string): any[] | null {
    try {
        let outputButtons: any[] = new Array();
        groups.forEach((value) => {
            outputButtons.push(
                Markup.button.callback(`‚Ññ ${value}`, `_${InlSelectDay}_${userId}_${matchedDirection}_${value}_`)
            );
        });
        let getDirectionsEmoji = GetEmojiFromDirection(matchedDirection);
        outputButtons = outputButtons.reduce((acc, n, i) => ((i % 4) || acc.push([]), acc.at(-1).push(n), acc), []);
        outputButtons.unshift([
            Markup.button.callback(`üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã ${getDirectionsEmoji}`, `_${InlPinGroup}_${userId}_${matchedDirection}_`)
        ]);
        outputButtons.push([
            Markup.button.callback(`üëàüèª –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è`, `_${InlGetSchedule}_${userId}_`)
        ]);
        return outputButtons;
    } catch (error) {
        return null;
    }
}

export async function SelectGroupActions(context: any) {
    try {
        let callbackQuery: string = context?.update?.callback_query?.data;
        if (callbackQuery && callbackQuery.search(SelectGroupActionsRegExp) != -1) {
            let matchedArgs: RegExpMatchArray | null = callbackQuery.match(SelectGroupActionsRegExp);
            if (matchedArgs) {
                let userId: number = context?.update.callback_query?.from?.id;
                let matchedUserId: number = Number(matchedArgs[1]);
                let matchedDirection: string = matchedArgs[2];
                
                await CheckInputArgs(context, userId, matchedUserId, matchedDirection);

                let groups = await GetGroupsNumber(matchedDirection);
                if (!groups) {
                    return await context.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
                }

                let buttons = GetGroupsButton(groups, userId, matchedDirection);
                if (!buttons) {
                    return await context.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
                }

                let userName: string = GetNameFromContext(context);
                await context.editMessageText(`üññüèª <b>${userName}</b>, <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b>, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.\n` +
                                              `‚òùüèª –ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, –∏–º–µ–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "<b>–ó–∞–∫—Ä–µ–ø–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã</b>", ` +
                                              `–≥–¥–µ <b>–º–æ–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –≥—Ä—É–ø–ø—É</b>, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ <b>–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start</b>.`, {
                    parse_mode: "HTML",
                    reply_markup: Markup.inlineKeyboard(buttons).reply_markup
                });
            }
        }
        await context.answerCbQuery();
    } catch (error) {
        console.log(error)
    }
}