/*
	This is a NKAIDH_BOT_TELEGRAM project file.
	Developer: sizeoftrickster <sizeoftrickster@gmail.com>
	
	See more here https://github.com/sizeoftrickster/NKAIDH_BOT_TELEGRAM
	
	Copyright (c) 2025 Andrey Gazizov <sizeoftrickster@gmail.com>. All rights reserved.
*/

import axios from "axios";
import { InlSelectDay, InlSendSchedule, SendScheduleActionsRegExp } from "../bot.constants";
import { CheckInputArgs, GetEmojiFromDirection, GetNameFromContext, GetNameFromDirection, GetSchedule } from "../bot.utils";
import { Markup } from "telegraf";

export async function SendScheduleActions(context: any) {
    try {
        let callbackQuery: string = context?.update?.callback_query?.data;
        if (callbackQuery && callbackQuery.search(SendScheduleActionsRegExp) != -1) {
            let matchedArgs: RegExpMatchArray | null = callbackQuery.match(SendScheduleActionsRegExp);
            if (matchedArgs) {
                let userId: number = context?.update.callback_query?.from?.id;
                let matchedUserId: number = Number(matchedArgs[1]);
                let matchedDirection: string = matchedArgs[2];
                
                await CheckInputArgs(context, userId, matchedUserId, matchedDirection);

                let matchedGroup: string = matchedArgs[3];
                let matchedDay: string = matchedArgs[4];
                
                let schedule = await GetSchedule(matchedDirection, matchedGroup, matchedDay);
                if (!schedule) {
                    return await context.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
                }

                let getDirectionsEmoji = GetEmojiFromDirection(matchedDirection);
                let getDirectionsName = GetNameFromDirection(matchedDirection);
                let userName: string = GetNameFromContext(context);
                await context.editMessageText(`üññüèª <b>${userName}</b>, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–æ—Ç–æ–≤–æ.\n` +
                                              `üëâüèª <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${getDirectionsName} ${getDirectionsEmoji}</b>\n` +
                                              `üëâüèª <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: ${matchedGroup}</b>\n` +
                                              `üìö <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>:\n${schedule.map((line, index) => `${index + 1}) ${line}`).join('\n')}`, {
                    parse_mode: "HTML",
                    reply_markup: Markup.inlineKeyboard([
                        Markup.button.callback("üëàüèª –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏", `_${InlSelectDay}_${userId}_${matchedDirection}_${matchedGroup}_`)
                    ]).reply_markup
                });
            }
        }
    } catch (error) {
        console.log(error)
    }
}