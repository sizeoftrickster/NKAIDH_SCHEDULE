/*
	This is a NKAIDH_BOT_TELEGRAM project file.
	Developer: sizeoftrickster <sizeoftrickster@gmail.com>
	
	See more here https://github.com/sizeoftrickster/NKAIDH_BOT_TELEGRAM
	
	Copyright (c) 2025 Andrey Gazizov <sizeoftrickster@gmail.com>. All rights reserved.
*/

import { InlSelectGroup, InlSendSchedule, SelectDayActionsRegExp } from "../bot.constants";
import { CheckInputArgs, Days, GetEmojiFromDirection, GetNameFromContext, GetNameFromDirection } from "../bot.utils";
import { Markup } from "telegraf";

function GetGroupsButton(userId: number, matchedDirection: string, matchedGroup: string) {
    try {
        let outputButtons: any[] = new Array();
        Days.forEach((value, index) => {
            if (value[0] == new Date().getDay()) {
                outputButtons.push([
                    Markup.button.callback(`üìÜ ${value[1]} üìÜ`, `_${InlSendSchedule}_${userId}_${matchedDirection}_${matchedGroup}_${index+1}_`)
                ]);
            } else {
                outputButtons.push([
                    Markup.button.callback(`${value[1]}`, `_${InlSendSchedule}_${userId}_${matchedDirection}_${matchedGroup}_${index+1}_`)
                ]);
            }
        });
        outputButtons.push([
            Markup.button.callback(`üëàüèª –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã`, `_${InlSelectGroup}_${userId}_${matchedDirection}_`)
        ]);
        return outputButtons;
    } catch (error) {
        return null;
    }
}

export async function SelectDayActions(context: any) {
    try {
        let callbackQuery: string = context?.update?.callback_query?.data;
        if (callbackQuery && callbackQuery.search(SelectDayActionsRegExp) != -1) {
            let matchedArgs: RegExpMatchArray | null = callbackQuery.match(SelectDayActionsRegExp);
            if (matchedArgs) {
                let userId: number = context?.update.callback_query?.from?.id;
                let matchedUserId: number = Number(matchedArgs[1]);
                let matchedDirection: string = matchedArgs[2];
                
                await CheckInputArgs(context, userId, matchedUserId, matchedDirection);
                
                let matchedGroup: string = matchedArgs[3];

                let buttons = GetGroupsButton(userId, matchedDirection, matchedGroup);
                if (!buttons) {
                    return await context.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
                }

                let getDirectionsEmoji = GetEmojiFromDirection(matchedDirection);
                let getDirectionsName = GetNameFromDirection(matchedDirection);
                let userName: string = GetNameFromContext(context);
                await context.editMessageText(`üññüèª <b>${userName}</b>, <b>–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</b>, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n` +
                                              `üëâüèª <b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>: ${getDirectionsName} ${getDirectionsEmoji}\n` +
                                              `üòΩ <b>–í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞</b>: ${matchedGroup}\n` +
                                              `üëáüèª <b>–°–∏–º–≤–æ–ª –≤–æ–∑–ª–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ üìÜ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.</b>`, {
                    parse_mode: "HTML",
                    reply_markup: Markup.inlineKeyboard(buttons).reply_markup
                });
            }
        }
    } catch (error) {
        console.log(error)
    }
}