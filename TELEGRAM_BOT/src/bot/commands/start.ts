/*
	This is a NKAIDH_BOT_TELEGRAM project file.
	Developer: sizeoftrickster <sizeoftrickster@gmail.com>
	
	See more here https://github.com/sizeoftrickster/NKAIDH_BOT_TELEGRAM
	
	Copyright (c) 2025 Andrey Gazizov <sizeoftrickster@gmail.com>. All rights reserved.
*/

import { Context, Markup } from "telegraf";
import { CDatabaseInstance } from "../../database/database.class";
import { IUsers } from "../../database/database.interface";
import { GetNameFromContext } from "../bot.utils";
import { InlDirectionAT, InlDirectionRC, InlGetCallSchedule, InlGetSchedule, InlSelectDay } from "../bot.constants";

export async function CommandStart(context: Context) {
    try {
        let userId: number | undefined = context?.message?.from?.id;
        if (userId) {
            let Users: IUsers | null = CDatabaseInstance.PrepareSingle<IUsers>(`SELECT * FROM Users WHERE Id = ${userId}`);
            if (!Users) {
                CDatabaseInstance.Exec(`INSERT INTO Users (Id) VALUES(${userId})`);
            }
            Users = CDatabaseInstance.PrepareSingle<IUsers>(`SELECT * FROM Users WHERE Id = ${userId}`);
            if (Users && Users.Id) {
                let buttons: any[] = new Array();
                if (Users.PinnedRCGroups) {
                    let pinnedGroups: string[] = Users.PinnedRCGroups.split(",");
                    pinnedGroups.forEach((value) => {
                        buttons.push([
                            Markup.button.callback(`üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ‚Ññ${value} üöú`, `_${InlSelectDay}_${userId}_${InlDirectionRC}_${value}_`)
                        ]);
                    });
                }
                if (Users.PinnedATGroups) {
                    let pinnedGroups: string[] = Users.PinnedATGroups.split(",");
                    pinnedGroups.forEach((value) => {
                        buttons.push([
                            Markup.button.callback(`üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ‚Ññ${value} üöô`, `_${InlSelectDay}_${userId}_${InlDirectionAT}_${value}_`)
                        ]);
                    });
                }
                buttons.push(
                    [Markup.button.callback("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", `_${InlGetSchedule}_${userId}_`), Markup.button.callback("üïò –ó–≤–æ–Ω–∫–∏", `_${InlGetCallSchedule}_${userId}_`)],
                    [Markup.button.url("üéñ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –ù–ö–ê–∏–î–•", "https://t.me/+WEgBIr05REs3Zjcy")],
                    [Markup.button.url("ü§© –ö–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "https://t.me/+Vs7SIWAHLzs2ZGUy")]
                );
                let userName: string = GetNameFromContext(context);
                await context.reply(`üëãüèª <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${userName}</b>!\n` +
                                    `üëæ –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å <b>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–¥–∂–∞ –ù–ö–ê–∏–î–•</b>.\n` +
                                    `ü§üüèª –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>.\n` +
                                    `ü§´ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>: <u>–¥–æ—Ä–æ–∂–Ω–æ-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ</u>, <u>–∞–≤—Ç–æ-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ</u>`, {
                                        parse_mode: "HTML",
                                        reply_markup: Markup.inlineKeyboard(buttons).reply_markup
                                    });
            }
        }
    } catch (error) {
        console.log(error)
    }
}